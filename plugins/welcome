#!/usr/bin/env python3
"""
Usage:
    welcome [-v] [-h]

Print welcome message.

Options:
  -v, --version  Show version info and exit.
  -h, --help     Show help message and exit.
"""

# Define version.
__version__ = "2025.04.20"

# Import standard libraries.
import argparse
import enum
import getpass
import os
import re
import subprocess
import shutil


#---------------------------------------------------------------------------------------------------
# Utility functions and classes
#---------------------------------------------------------------------------------------------------

class Color(enum.StrEnum):
    """
    ANSI Escape sequence for colors.
    """
    RED    = "\x1B[38;2;204;102;102m"
    GREEN  = "\x1B[38;2;181;189;104m"
    YELLOW = "\x1B[38;2;240;198;116m"
    BLUE   = "\x1B[38;2;129;162;190m"
    PURPLE = "\x1B[38;2;178;148;187m"
    CYAN   = "\x1B[38;2;138;190;183m"
    GRAY   = "\x1B[38;2;197;200;198m"
    NONE   = "\x1B[0m"


def get_username():
    """
    Returns user name.
    """
    return {"user": getpass.getuser()}


def get_system_info():
    """
    Returns system info.
    """
    names = ["sys_name", "node_name", "kernel_info", "kernel_version", "march"]
    return dict(zip(names, os.uname()))


def get_cpu_info():
    """
    Returns CPU info.
    """
    n_cpus = 0
    for line in subprocess.check_output("cat /proc/cpuinfo", shell=True).decode().split("\n"):
        if "model name" in line:
            cpu_name = re.sub( ".*model name.*:", "", line.strip(), 1)
            n_cpus += 1
    return {"cpu_name": cpu_name, "n_cpus": n_cpus}


def get_disk_info():
    """
    Returns disk info.
    """
    disk_total, disk_used, *_ = shutil.disk_usage("/")
    disk_used_perc = 100 * disk_used / disk_total
    disk_total_gb = disk_total / 2**30
    return {"disk_total_gb": disk_total_gb, "disk_used_perc": disk_used_perc}


def get_mem_info():
    """
    Returns memory info.
    """
    mem_total, mem_used, *_ = map(int, os.popen("free -t -m").readlines()[1].split()[1:])
    mem_used_perc = 100 * mem_used / mem_total
    mem_total_gb = mem_total / 2**10
    return {"mem_total_gb": mem_total_gb, "mem_used_perc": mem_used_perc}


def get_uptime():
    """
    Returns uptime.
    """
    return {"uptime": os.popen("uptime -p").readlines()[0].strip()[2:]}


#---------------------------------------------------------------------------------------------------
# Welcome message function
#---------------------------------------------------------------------------------------------------

def welcome():
    """
    Print welcome message.
    """
    colored_nishiki  = f"{Color.RED}N {Color.PURPLE}i "
    colored_nishiki += f"{Color.GREEN}S {Color.YELLOW}h {Color.PURPLE}i "
    colored_nishiki += f"{Color.BLUE}K {Color.PURPLE}i"
    colored_nishiki += f"{Color.NONE}"

    # Define colors.
    info = {"RED"   : Color.RED,
            "GREEN" : Color.GREEN,
            "YELLOW": Color.YELLOW,
            "BLUE"  : Color.BLUE,
            "PURPLE": Color.PURPLE,
            "CYAN"  : Color.CYAN,
            "GRAY"  : Color.GRAY,
            "NONE"  : Color.NONE}

    # Get user name.
    info |= get_username()

    # Get system name and kernel name.
    info |= get_system_info()

    # Get cpu info.
    info |= get_cpu_info()

    # Get disk info.
    info |= get_disk_info()

    # Get memory info.
    info |= get_mem_info()

    # Get uptime info.
    info |= get_uptime()

    print("Welcome to", colored_nishiki, "!")
    print()
    print("{RED}{user}{NONE} @ {GREEN}{node_name}{NONE}".format(**info))
    print("-" * (len(info["user"]) + len(info["node_name"]) + 3))
    print("{BLUE}OS{NONE}: {sys_name}".format(**info))
    print("{BLUE}Kernel{NONE}: {kernel_info}".format(**info))
    print("{BLUE}Arch{NONE}: {march}".format(**info))
    print("{BLUE}CPU{NONE}: {cpu_name} x {n_cpus}".format(**info))
    print("{BLUE}Disk{NONE}: {disk_total_bg:,.1f} GB ({disk_used_perc:.1f}% used)".format(**info))
    print("{BLUE}Memory{NONE}: {mem_total_gb:,.1f} GB ({mem_used_perc:.1f}% used)".format(**info))
    print("{BLUE}Uptime{NONE}: {uptime}".format(**info))
    print()
    print("Copyright (C) Tetsuya Ishikawa")
    print("This software is released under the MIT License")
    print()


#---------------------------------------------------------------------------------------------------
# Main function of this script
#---------------------------------------------------------------------------------------------------

def parse_args() -> argparse.Namespace:
    """
    Parse command line arguments.

    Returns:
        (argparse.Namespace): Parsed command line arguments.
    """
    parser = argparse.ArgumentParser(prog="welcome", add_help=False)
    parser.add_argument("-v", "--version", action="store_true")
    parser.add_argument("-h", "--help", action="store_true")
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    """
    Entrypoint of this script.

    Args:
        args (argparse.Namespace): Parsed command line arguments.
    """
    if args.version:
        print("welcome", __version__)
        print("Copyright (C) Tetsuya Ishikawa")
        print("This software is released under the MIT License")

    elif args.help:
        print(__doc__.strip())

    else:
        welcome()


if __name__ == "__main__":
    main(parse_args())




# vim: expandtab tabstop=4 shiftwidth=4 fdm=marker
