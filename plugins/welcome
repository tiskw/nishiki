#!/usr/bin/env python3
"""
Usage:
    welcome [-v] [-h]

Print welcome message.

Options:
  -v, --version  Show version info and exit.
  -h, --help     Show help message and exit.
"""

# Define version.
__version__ = "2025.04.20"

# Import standard libraries.
import argparse
import enum
import getpass
import os
import re
import subprocess
import shutil


#---------------------------------------------------------------------------------------------------
# Utility functions and classes
#---------------------------------------------------------------------------------------------------

class Color(enum.StrEnum):
    """
    ANSI Escape sequence for colors.
    """
    RED    = "\x1B[38;2;204;102;102m"
    GREEN  = "\x1B[38;2;181;189;104m"
    YELLOW = "\x1B[38;2;240;198;116m"
    BLUE   = "\x1B[38;2;129;162;190m"
    PURPLE = "\x1B[38;2;178;148;187m"
    CYAN   = "\x1B[38;2;138;190;183m"
    GRAY   = "\x1B[38;2;197;200;198m"
    NONE   = "\x1B[0m"


#---------------------------------------------------------------------------------------------------
# Welcome message function
#---------------------------------------------------------------------------------------------------

def welcome():
    """
    Print welcome message.
    """
    colored_nishiki  = f"{Color.RED}N {Color.PURPLE}i "
    colored_nishiki += f"{Color.GREEN}S {Color.YELLOW}h {Color.PURPLE}i "
    colored_nishiki += f"{Color.BLUE}K {Color.PURPLE}i"
    colored_nishiki += f"{Color.NONE}"

    # Get user name.
    user = getpass.getuser()

    # Get system name and kernel name.
    sys_name, node_name, kernel_info, kernel_version, march = os.uname()

    # Get cpu info.
    n_cpus = 0
    for line in subprocess.check_output("cat /proc/cpuinfo", shell=True).decode().split("\n"):
        if "model name" in line:
            cpu_name = re.sub( ".*model name.*:", "", line.strip(), 1)
            n_cpus += 1

    # Get disk info.
    disk_total, disk_used, disk_free = shutil.disk_usage("/")
    disk_used_ratio = disk_used / disk_total

    # Get memory info.
    mem_total, mem_used, mem_free, *_ = map(int, os.popen("free -t -m").readlines()[1].split()[1:])
    mem_used_ratio = mem_used / mem_total

    # Get uptime info.
    uptime = os.popen("uptime -p").readlines()[0].strip()[2:]

    print(f"Welcome to {colored_nishiki}!")
    print(f"")
    print(f"{Color.RED}{user} {Color.NONE}@ {Color.GREEN}{node_name}{Color.NONE}")
    print(f"-" * (len(user) + len(node_name) + 3))
    print(f"{Color.BLUE}OS{Color.NONE}: {sys_name}")
    print(f"{Color.BLUE}Kernel{Color.NONE}: {kernel_info}")
    print(f"{Color.BLUE}Arch{Color.NONE}: {march}")
    print(f"{Color.BLUE}CPU{Color.NONE}: {cpu_name} x {n_cpus}")
    print(f"{Color.BLUE}Disk{Color.NONE}: {disk_total/2**30:,.1f} GB ({100*disk_used_ratio:.1f}% used)")
    print(f"{Color.BLUE}Memory{Color.NONE}: {mem_total/2**10:,.1f} GB ({100*mem_used_ratio:.1f}% used)")
    print(f"{Color.BLUE}Uptime{Color.NONE}: {uptime}")
    print("")
    print(f"Copyright (C) Tetsuya Ishikawa")
    print(f"This software is released under the MIT License")
    print(f"")


#---------------------------------------------------------------------------------------------------
# Main function of this script
#---------------------------------------------------------------------------------------------------

def parse_args() -> argparse.Namespace:
    """
    Parse command line arguments.

    Returns:
        (argparse.Namespace): Parsed command line arguments.
    """
    parser = argparse.ArgumentParser(prog="chooser", add_help=False)
    parser.add_argument("-v", "--version", action="store_true")
    parser.add_argument("-h", "--help", action="store_true")
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    """
    Entrypoint of this script.

    Args:
        args (argparse.Namespace): Parsed command line arguments.
    """
    if args.version:
        print("welcome", __version__)
        print("Copyright (C) Tetsuya Ishikawa")
        print("This software is released under the MIT License")

    elif args.help:
        print(__doc__.strip())

    else:
        welcome()
 

if __name__ == "__main__":
    main(parse_args())




# vim: expandtab tabstop=4 shiftwidth=4 fdm=marker
