////////////////////////////////////////////////////////////////////////////////////////////////////
// C++ header file: history_manager.hxx
//
// This file defines the class `HistoryManager` which manages history file.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HISTORY_MANAGER_HXX
#define HISTORY_MANAGER_HXX

#include <filesystem>

#include "string_x.hxx"

////////////////////////////////////////////////////////////////////////////////////////////////////
// HistoryManager: A class to run command
////////////////////////////////////////////////////////////////////////////////////////////////////
class HistoryManager
{
    public:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Constructors
        ////////////////////////////////////////////////////////////////////////////////////////////

        HistoryManager(void);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Getter and setter functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Read history file and returns a vector of histories.
        std::vector<StringX>
        read_history_file(void)
        const noexcept;

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Member functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Append the given command to the history file.
        void
        append(const StringX& command)
        const noexcept;

        // Normalize the history file.
        void
        normalize(void)
        const noexcept;

        // Set the completion cache where the `storage` comes from TextBuffer.
        void
        set_completion_cache(const std::vector<std::pair<StringX, StringX>>& storage)
        noexcept;

        // Returns completion result. Note that the `lhs` is not contained in the returned value.
        StringX
        complete(const StringX& lhs)
        const noexcept;

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Static functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Returns true if the given command should be contained in the history file.
        static bool
        is_history_target(const StringX& command)
        noexcept;

    private:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Private member variables
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Path to the history file.
        std::filesystem::path path;

        // True if the history file can be exist.
        bool can_exists;

        // History cache for completion.
        std::vector<StringX> hist_cache;
};

#endif

// vim: expandtab shiftwidth=4 shiftwidth=4 fdm=marker
