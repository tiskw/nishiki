////////////////////////////////////////////////////////////////////////////////////////////////////
// C++ header file: command_runner.hxx
//
// A command runner for NiShiKi to run user input in a backend. The command runner can manage both
// normal shell command and NiShiKi-special command. See the comment of
// `CommandRunner::command_nishiki` function for more details about the NiShiKi-special command.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef COMMAND_RUNNER_HXX
#define COMMAND_RUNNER_HXX

#include "string_x.hxx"

////////////////////////////////////////////////////////////////////////////////////////////////////
// Define constants
////////////////////////////////////////////////////////////////////////////////////////////////////

#define NISHIKI_CMD_DELIM ":NISHIKI:"

////////////////////////////////////////////////////////////////////////////////////////////////////
// CommandRunner: A class to run command
////////////////////////////////////////////////////////////////////////////////////////////////////
class CommandRunner
{
    public:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Constructors
        ////////////////////////////////////////////////////////////////////////////////////////////

        CommandRunner(void);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Getter and setter functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        const StringX& get_next_lhs(void) const noexcept;
        const StringX& get_next_rhs(void) const noexcept;

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Member functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        int32_t
        run(const StringX& input)
        noexcept;

    private:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Private member variables
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Next Left/right hand side of the editing text. This variables will be passed to
        // the EditBuffer instance and used as an initial value of the editing text.
        StringX lhs_next, rhs_next;

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Private member functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Callback function of "alias" command.
        // This function prints all aliases values to STDOUT.
        int32_t
        command_alias()
        const noexcept;

        // Callback function of "cd" command.
        // This function changes current directory.
        int32_t
        command_cd(const std::vector<StringX>& tokens)
        const noexcept;

        // Callback function of the other external command.
        // This function executes the given command using the backend shell.
        int32_t
        command_exec(const std::string& command)
        const noexcept;

        // Callback function of the NiShiKi-special command.
        // This funtion parse NiShiKi-special command and run it.
        int32_t
        command_nishiki(const std::string& command)
        noexcept;
};

#endif

// vim: expandtab shiftwidth=4 shiftwidth=4 fdm=marker
