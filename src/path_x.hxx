////////////////////////////////////////////////////////////////////////////////////////////////////
// C++ header file: path_x.hxx
//
// This file defines the class `PathX` that provides utility functions related to file path.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PATH_X_HXX
#define PATH_X_HXX

#include <filesystem>

#include "string_x.hxx"

////////////////////////////////////////////////////////////////////////////////////////////////////
// PathX: A class for filepath manipulation
////////////////////////////////////////////////////////////////////////////////////////////////////
class PathX : public std::filesystem::path
{
    public:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Constructors
        ////////////////////////////////////////////////////////////////////////////////////////////

        explicit PathX(const std::filesystem::path& path);
        explicit PathX(const char* path);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Member functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Returns a list of names of the entries in the given directory path.
        std::vector<std::string>
        listdir(void)
        const noexcept;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// Other functions
////////////////////////////////////////////////////////////////////////////////////////////////////

// Split the path to completion target and query.
std::tuple<PathX, std::string>
split_to_target_and_query(const std::vector<StringX>& tokens)
noexcept;

#endif

// vim: expandtab shiftwidth=4 shiftwidth=4 fdm=marker
