////////////////////////////////////////////////////////////////////////////////////////////////////
// C++ header file: read_command.hxx
//
// This function defines the class `ReadCommand` that mamanges the user input session.
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef READ_COMMAND_HXX
#define READ_COMMAND_HXX

#include "history_manager.hxx"
#include "string_x.hxx"
#include "text_buffer.hxx"

////////////////////////////////////////////////////////////////////////////////////////////////////
// ReadCommand: A class to read user input with rich interface
////////////////////////////////////////////////////////////////////////////////////////////////////
class ReadCommand
{
    public:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Constructors
        ////////////////////////////////////////////////////////////////////////////////////////////

        ReadCommand(void);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Destructors
        ////////////////////////////////////////////////////////////////////////////////////////////

        ~ReadCommand(void);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Member functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Read user input with rich interface.
        StringX
        read(const StringX& lhs_ini, const StringX& rhs_ini)
        noexcept;

    private:

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Private member variables
        ////////////////////////////////////////////////////////////////////////////////////////////

        // Text buffer instance.
        TextBuffer buffer;

        // History manager instance.
        HistoryManager hist;

        ////////////////////////////////////////////////////////////////////////////////////////////
        // Private member functions
        ////////////////////////////////////////////////////////////////////////////////////////////

        StringX
        create_nishiki_command(const std::string& command_keybind)
        const noexcept;
};

#endif

// vim: expandtab shiftwidth=4 shiftwidth=4 fdm=marker
